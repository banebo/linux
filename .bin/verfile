#!/usr/bin/env python3

import argparse
import hashlib
import os


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-v', '--verbose',
                        action='store_true',
                        dest='verbose',
                        help='Verbose')
    parser.add_argument('-f', '--file',
                        dest='file',
                        required=True,
                        help='File to be checked')
    parser.add_argument('-sha1',
                        dest='sha1',
                        help='SHA1 sum of the file to compare against')
    parser.add_argument('-sha256',
                        dest='sha256',
                        help='SHA256 sum of the file to compare against')
    parser.add_argument('-sha512',
                        dest='sha512',
                        help='SHA512 sum of the file to compare against')
    parser.add_argument('-md5',
                        dest='md5',
                        help='MD5 sum of the file to compare against')
    return parser.parse_args()


def load_file(file_name, verbose=False):
    ''' Loads the file as binary '''
    if not os.path.isfile(file_name):
        print("[-] File {} could not be found...".format(file_name))
        exit(1)
    if not os.access(file_name, os.R_OK):
        print("[-] Cannot read file, permission denied...")
        exit(1)
    if verbose:
        print('[*] Loading the {} file...'.format(file_name))
    with open(file_name, 'rb') as file:
        data = file.read()
    if verbose:
        print('\t[+] Done.')
    return data


def main():
    ''' Checks file integrity and compares with provided hashes '''

    args = parse_args()
    if not (args.sha1 or args.sha256 or args.sha512 or args.md5):
        print("[-] Please provide hash(es) to check against")
        exit(1)

    file_data = load_file(args.file, verbose=args.verbose)

    if args.sha1:
        if args.verbose:
            print("[*] Calculating SHA1...")
        sha1sum = hashlib.sha1(file_data).hexdigest()
        if args.sha1.lower() == sha1sum.lower():
            print("[+] SHA1: OK!")
        else:
            print("[!] SHA1: WRONG!")
    if args.sha256:
        if args.verbose:
            print("[*] Calculating SHA256sum...")
        sha256sum = hashlib.sha256(file_data).hexdigest()
        if args.sha256.lower() == sha256sum.lower():
            print("[+] SHA256: OK!")
        else:
            print("[!] SHA256: WRONG!")
    if args.sha512:
        if args.verbose:
            print("[*] Calculating SHA512sum...")
        sha512sum = hashlib.sha512(file_data).hexdigest()
        if args.sha512.lower() == sha512sum.lower():
            print("[+] SHA1: OK!")
        else:
            print("[!] SHA1: WRONG!")
    if args.md5:
        if args.verbose:
            print("[*] Calculating MD5sum...")
        md5sum = hashlib.md5(file_data).hexdigest()
        if args.md5.lower() == md5sum.lower():
            print("[+] MD5: OK!")
        else:
            print("[!] MD5: WRONG!")


if __name__ == "__main__":
    main()
